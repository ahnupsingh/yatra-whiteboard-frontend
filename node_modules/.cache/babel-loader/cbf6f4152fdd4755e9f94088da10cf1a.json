{"ast":null,"code":"export const deepFlatten = arr => [].concat(...arr.map(v => Array.isArray(v) ? deepFlatten(v) : v));\nexport const parseRoute = (routes, link = \"routes\") => {\n  return routes.map(item => {\n    let nnav = Object.assign({}, item);\n\n    if (Array.isArray(nnav[link])) {\n      delete nnav[link];\n      return [nnav, ...parseRoute(item[link])];\n    } else {\n      return item;\n    }\n  }).filter(item => item.hasOwnProperty(\"accessible\") ? item.accessible : true);\n};\nexport const keyToTitleCase = str => {\n  if (!str) {\n    return str;\n  }\n\n  let frags = str.split(\"_\");\n\n  for (let i = 0; i < frags.length; i++) {\n    frags[i] = frags[i].charAt(0).toUpperCase() + frags[i].slice(1);\n  }\n\n  return frags.join(\" \");\n};","map":{"version":3,"sources":["/home/anup/yatra/testWhiteboardFrontend/src/misc/utils.js"],"names":["deepFlatten","arr","concat","map","v","Array","isArray","parseRoute","routes","link","item","nnav","Object","assign","filter","hasOwnProperty","accessible","keyToTitleCase","str","frags","split","i","length","charAt","toUpperCase","slice","join"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAIC,GAAD,IACvB,GAAGC,MAAH,CAAU,GAAGD,GAAG,CAACE,GAAJ,CAASC,CAAD,IAAQC,KAAK,CAACC,OAAN,CAAcF,CAAd,IAAmBJ,WAAW,CAACI,CAAD,CAA9B,GAAoCA,CAApD,CAAb,CADG;AAGP,OAAO,MAAMG,UAAU,GAAG,CAACC,MAAD,EAASC,IAAI,GAAG,QAAhB,KAA6B;AACnD,SAAOD,MAAM,CACRL,GADE,CACGO,IAAD,IAAU;AACX,QAAIC,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,IAAlB,CAAX;;AACA,QAAIL,KAAK,CAACC,OAAN,CAAcK,IAAI,CAACF,IAAD,CAAlB,CAAJ,EAA+B;AAC3B,aAAOE,IAAI,CAACF,IAAD,CAAX;AACA,aAAO,CAACE,IAAD,EAAO,GAAGJ,UAAU,CAACG,IAAI,CAACD,IAAD,CAAL,CAApB,CAAP;AACH,KAHD,MAGO;AACH,aAAOC,IAAP;AACH;AACJ,GATE,EAUFI,MAVE,CAUMJ,IAAD,IACJA,IAAI,CAACK,cAAL,CAAoB,YAApB,IAAoCL,IAAI,CAACM,UAAzC,GAAsD,IAXvD,CAAP;AAaH,CAdM;AAgBP,OAAO,MAAMC,cAAc,GAAIC,GAAD,IAAS;AACnC,MAAI,CAACA,GAAL,EAAU;AACN,WAAOA,GAAP;AACH;;AACD,MAAIC,KAAK,GAAGD,GAAG,CAACE,KAAJ,CAAU,GAAV,CAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnCF,IAAAA,KAAK,CAACE,CAAD,CAAL,GAAWF,KAAK,CAACE,CAAD,CAAL,CAASE,MAAT,CAAgB,CAAhB,EAAmBC,WAAnB,KAAmCL,KAAK,CAACE,CAAD,CAAL,CAASI,KAAT,CAAe,CAAf,CAA9C;AACH;;AACD,SAAON,KAAK,CAACO,IAAN,CAAW,GAAX,CAAP;AACH,CATM","sourcesContent":["export const deepFlatten = (arr) =>\n    [].concat(...arr.map((v) => (Array.isArray(v) ? deepFlatten(v) : v)));\n\nexport const parseRoute = (routes, link = \"routes\") => {\n    return routes\n        .map((item) => {\n            let nnav = Object.assign({}, item);\n            if (Array.isArray(nnav[link])) {\n                delete nnav[link];\n                return [nnav, ...parseRoute(item[link])];\n            } else {\n                return item;\n            }\n        })\n        .filter((item) =>\n            item.hasOwnProperty(\"accessible\") ? item.accessible : true\n        );\n};\n\nexport const keyToTitleCase = (str) => {\n    if (!str) {\n        return str;\n    }\n    let frags = str.split(\"_\");\n    for (let i = 0; i < frags.length; i++) {\n        frags[i] = frags[i].charAt(0).toUpperCase() + frags[i].slice(1);\n    }\n    return frags.join(\" \");\n};\n"]},"metadata":{},"sourceType":"module"}